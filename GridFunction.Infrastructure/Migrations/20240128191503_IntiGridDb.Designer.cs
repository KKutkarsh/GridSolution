// <auto-generated />
using System;
using GridFunction.Infrastructure.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GridFunction.Infrastructure.Migrations
{
    [DbContext(typeof(GridContext))]
    [Migration("20240128191503_IntiGridDb")]
    partial class IntiGridDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GridFunctions.Core.Entities.Grid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GridId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GridName")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Grids");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GridName = "Grid1"
                        },
                        new
                        {
                            Id = 2,
                            GridName = "Grid2"
                        },
                        new
                        {
                            Id = 3,
                            GridName = "Grid3"
                        });
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.GridDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GridDetailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GridId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("GridId");

                    b.ToTable("GridDetails");
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.GridNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GridNodeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GridRegionId")
                        .HasColumnType("int");

                    b.Property<string>("NodeName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GridRegionId");

                    b.ToTable("GridNodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GridRegionId = 1,
                            NodeName = "Node1"
                        },
                        new
                        {
                            Id = 2,
                            GridRegionId = 1,
                            NodeName = "Node2"
                        },
                        new
                        {
                            Id = 3,
                            GridRegionId = 1,
                            NodeName = "Node3"
                        },
                        new
                        {
                            Id = 4,
                            GridRegionId = 2,
                            NodeName = "Node1"
                        },
                        new
                        {
                            Id = 5,
                            GridRegionId = 2,
                            NodeName = "Node2"
                        },
                        new
                        {
                            Id = 6,
                            GridRegionId = 2,
                            NodeName = "Node3"
                        },
                        new
                        {
                            Id = 7,
                            GridRegionId = 3,
                            NodeName = "Node1"
                        },
                        new
                        {
                            Id = 8,
                            GridRegionId = 3,
                            NodeName = "Node2"
                        },
                        new
                        {
                            Id = 9,
                            GridRegionId = 3,
                            NodeName = "Node3"
                        });
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.GridRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GridRegionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GridId")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GridId");

                    b.ToTable("GridRegions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GridId = 1,
                            RegionName = "Region1"
                        },
                        new
                        {
                            Id = 2,
                            GridId = 1,
                            RegionName = "Region2"
                        },
                        new
                        {
                            Id = 3,
                            GridId = 1,
                            RegionName = "Region3"
                        },
                        new
                        {
                            Id = 4,
                            GridId = 2,
                            RegionName = "Region1"
                        },
                        new
                        {
                            Id = 5,
                            GridId = 2,
                            RegionName = "Region2"
                        },
                        new
                        {
                            Id = 6,
                            GridId = 2,
                            RegionName = "Region3"
                        },
                        new
                        {
                            Id = 7,
                            GridId = 3,
                            RegionName = "Region1"
                        },
                        new
                        {
                            Id = 8,
                            GridId = 3,
                            RegionName = "Region2"
                        },
                        new
                        {
                            Id = 9,
                            GridId = 3,
                            RegionName = "Region3"
                        });
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeasureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CollectedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("GridNodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Measurement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GridNodeId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.GridDetail", b =>
                {
                    b.HasOne("GridFunctions.Core.Entities.Grid", "Grid")
                        .WithMany("GridDetails")
                        .HasForeignKey("GridId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grid");
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.GridNode", b =>
                {
                    b.HasOne("GridFunctions.Core.Entities.GridRegion", "Region")
                        .WithMany("GridNodes")
                        .HasForeignKey("GridRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.GridRegion", b =>
                {
                    b.HasOne("GridFunctions.Core.Entities.Grid", "Grid")
                        .WithMany("GridRegions")
                        .HasForeignKey("GridId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grid");
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.Measure", b =>
                {
                    b.HasOne("GridFunctions.Core.Entities.GridNode", "GridNode")
                        .WithMany("Measures")
                        .HasForeignKey("GridNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GridNode");
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.Grid", b =>
                {
                    b.Navigation("GridDetails");

                    b.Navigation("GridRegions");
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.GridNode", b =>
                {
                    b.Navigation("Measures");
                });

            modelBuilder.Entity("GridFunctions.Core.Entities.GridRegion", b =>
                {
                    b.Navigation("GridNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
